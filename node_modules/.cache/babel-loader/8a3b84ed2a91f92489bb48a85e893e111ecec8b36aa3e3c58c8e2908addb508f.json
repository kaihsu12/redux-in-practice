{"ast":null,"code":"// UNDERSTAND hooks from redux Toolkit\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\n\n//UNDERSTAND create an object\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  //IMPORTANT initial state\n  initialState,\n  // IMPORTANT Reducers is an object, a map you could say, of all the reducers this slice needs.\n  reducer: {\n    //IMPORTANT every method here (parameter的那個state) will automatically receive the latest state.\n    //IMPORTANT Redux toolkit internally uses another package called imgur, which will detect code like this and which will automatically clone the existing state, create a new state object, keep all the state which we're not editing, and override the state which we are editing in an immutable way.\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n//IMPORTANT create store\n//IMPORTANT configureStore - it makes merging multiple reducers into one reducer easier thereafter\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\n\n//IMPORTANT get action method through counterSlice\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","initialState","counter","showCounter","counterSlice","name","reducer","increment","state","decrement","increase","action","payload","toggleCounter","store","counterActions","actions"],"sources":["/Users/kai/redux-in-practice/src/store/index.js"],"sourcesContent":["// UNDERSTAND hooks from redux Toolkit\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\n\n//UNDERSTAND create an object\nconst initialState = { counter: 0, showCounter: true };\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  //IMPORTANT initial state\n  initialState,\n  // IMPORTANT Reducers is an object, a map you could say, of all the reducers this slice needs.\n  reducer: {\n    //IMPORTANT every method here (parameter的那個state) will automatically receive the latest state.\n    //IMPORTANT Redux toolkit internally uses another package called imgur, which will detect code like this and which will automatically clone the existing state, create a new state object, keep all the state which we're not editing, and override the state which we are editing in an immutable way.\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\n//IMPORTANT create store\n//IMPORTANT configureStore - it makes merging multiple reducers into one reducer easier thereafter\nconst store = configureStore({\n  reducer: counterSlice.reducer,\n});\n\n//IMPORTANT get action method through counterSlice\nexport const counterActions = counterSlice.actions;\n\nexport default store;\n"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;;AAE9D;AACA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAEtD,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACf;EACAJ,YAAY;EACZ;EACAK,OAAO,EAAE;IACP;IACA;IACAC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA,MAAMW,KAAK,GAAGf,cAAc,CAAC;EAC3BO,OAAO,EAAEF,YAAY,CAACE;AACxB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMS,cAAc,GAAGX,YAAY,CAACY,OAAO;AAElD,eAAeF,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}